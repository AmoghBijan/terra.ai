name: "Terraform-Production"

on:
  pull_request:
    branches:
      - main
  push:
    paths:
      - 'env/prod/**.tf'
#    branches:
#      - feature/prod-*

jobs:
  terraform:
    name: "Deploy-Production-Environment"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
#           terraform_version: 1.5.2:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-west-2"

#      - name: Terraform Format
#        id: fmt
#        run: terraform -chdir="./env/prod" fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform -chdir="./env/prod" init -input=false
#          terraform workspace select dev

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'push'
        run: |
          terraform -chdir="./env/prod" plan -input=false -no-color
#        continue-on-error: true
#
#      - name: Comment on push
#        if: github.event_name == 'push'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        run: |
#          echo "#### Terraform Format and Style üñå${{ steps.fmt.outcome }}"
#          echo "#### Terraform Initialization ‚öôÔ∏è${{ steps.init.outcome }}"
#          echo "#### Terraform Plan üìñ${{ steps.plan.outcome }}"
#          echo "<details><summary>Show Plan</summary>"
#          echo "```"
#          echo "${{ env.PLAN }}"
#          echo "```"
#          echo "</details>"
#          echo "*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*" > comment.txt
#          gh issue comment ${{ github.event.issue.number }} --body "$(cat comment.txt)"

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: terraform -chdir="./env/prod" apply -auto-approve